version: '3'

services:
  gov:
    build:
      context: .
      dockerfile: ./apps/gov/Dockerfile
      args:
        - 'API_URL=${API_URL}'
    restart: always
    ports:
      - 8080:4321
    depends_on:
      api:
        condition: service_healthy
  org:
    build:
      context: .
      dockerfile: ./apps/org/Dockerfile
      args:
        - 'API_URL=${API_URL}'
    restart: always
    ports:
      - 8081:4321
    depends_on:
      api:
        condition: service_healthy
  admin:
    build:
      context: .
      dockerfile: ./apps/admin/Dockerfile
      args:
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    ports:
      - 8082:80
    depends_on:
      api:
        condition: service_healthy
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - 'DATABASE_URL=${DATABASE_URL}'
        - 'API_PORT=${API_PORT}'
        - 'STORAGE_BUCKET_NAME=${STORAGE_BUCKET_NAME}'
        - 'STORAGE_PUBLIC_ACCESS_URL=${STORAGE_PUBLIC_ACCESS_URL}'
        - 'STORAGE_ACCOUNT_ID=${STORAGE_ACCOUNT_ID}'
        - 'STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID}'
        - 'STORAGE_SECRET_ACCESS_KEY=${STORAGE_SECRET_ACCESS_KEY}'
        - 'REDIS_URL=${REDIS_URL}'
        - 'SESSION_SECRET=${SESSION_SECRET}'
        - 'CORS_ORIGINS=${CORS_ORIGINS}'
        - 'SEED_USER=${SEED_USER}'
        - 'SEED_USER_NAME=${SEED_USER_NAME}'
        - 'SEED_USER_EMAIL=${SEED_USER_EMAIL}'
        - 'SEED_USER_PASSWORD=${SEED_USER_PASSWORD}'
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/v1/healthcheck']
      interval: 30s
      timeout: 5s
      retries: 3
  db:
    image: postgres:alpine
    restart: always
    environment:
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.0.11-alpine
    restart: always
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
  migrate:
    image: migrate/migrate:v4.16.2
    profiles:
      - 'tools'
    volumes:
      - ./migrations:/migrations
    entrypoint:
      - 'migrate'
      - '-path'
      - '/migrations'
      - '-database'
      - '${DATABASE_URL}'
    command:
      - 'up'
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
volumes:
  db-data:
  redis:
